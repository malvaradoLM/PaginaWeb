//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiciosLibrary
{
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    using RemObjects.DataAbstract.Server;


    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass = typeof(TTimbre_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude = true)]
    public partial class TTimbre : RemObjects.SDK.Types.ComplexType
    {

        private string @__ReferenciaCFDI;

        private string @__XML;

        private string @__CadenaTimbre;

        private string @__VersionSAT;

        private string @__UUID;

        private System.DateTime @__FechaTimbrado;

        private string @__NoCertificadoSAT;

        private string @__SelloSAT;

        private string @__Acuse;

        private string @__Error;

        private bool @__Aprobado;

        private string @__RespuestaPAC;

        private int @__UsuarioID;

        private int @__Saldo;

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ReferenciaCFDI
        {
            get
            {
                return @__ReferenciaCFDI;
            }
            set
            {
                @__ReferenciaCFDI = value;
                this.TriggerPropertyChanged("ReferenciaCFDI");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string XML
        {
            get
            {
                return @__XML;
            }
            set
            {
                @__XML = value;
                this.TriggerPropertyChanged("XML");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string CadenaTimbre
        {
            get
            {
                return @__CadenaTimbre;
            }
            set
            {
                @__CadenaTimbre = value;
                this.TriggerPropertyChanged("CadenaTimbre");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string VersionSAT
        {
            get
            {
                return @__VersionSAT;
            }
            set
            {
                @__VersionSAT = value;
                this.TriggerPropertyChanged("VersionSAT");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string UUID
        {
            get
            {
                return @__UUID;
            }
            set
            {
                @__UUID = value;
                this.TriggerPropertyChanged("UUID");
            }
        }

        public virtual System.DateTime FechaTimbrado
        {
            get
            {
                return @__FechaTimbrado;
            }
            set
            {
                @__FechaTimbrado = value;
                this.TriggerPropertyChanged("FechaTimbrado");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string NoCertificadoSAT
        {
            get
            {
                return @__NoCertificadoSAT;
            }
            set
            {
                @__NoCertificadoSAT = value;
                this.TriggerPropertyChanged("NoCertificadoSAT");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string SelloSAT
        {
            get
            {
                return @__SelloSAT;
            }
            set
            {
                @__SelloSAT = value;
                this.TriggerPropertyChanged("SelloSAT");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Acuse
        {
            get
            {
                return @__Acuse;
            }
            set
            {
                @__Acuse = value;
                this.TriggerPropertyChanged("Acuse");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Error
        {
            get
            {
                return @__Error;
            }
            set
            {
                @__Error = value;
                this.TriggerPropertyChanged("Error");
            }
        }

        public virtual bool Aprobado
        {
            get
            {
                return @__Aprobado;
            }
            set
            {
                @__Aprobado = value;
                this.TriggerPropertyChanged("Aprobado");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string RespuestaPAC
        {
            get
            {
                return @__RespuestaPAC;
            }
            set
            {
                @__RespuestaPAC = value;
                this.TriggerPropertyChanged("RespuestaPAC");
            }
        }

        public virtual int UsuarioID
        {
            get
            {
                return @__UsuarioID;
            }
            set
            {
                @__UsuarioID = value;
                this.TriggerPropertyChanged("UsuarioID");
            }
        }

        public virtual int Saldo
        {
            get
            {
                return @__Saldo;
            }
            set
            {
                @__Saldo = value;
                this.TriggerPropertyChanged("Saldo");
            }
        }

        public override void ReadComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                ReferenciaCFDI = serializer.ReadAnsiString("ReferenciaCFDI");
                XML = serializer.ReadAnsiString("XML");
                CadenaTimbre = serializer.ReadAnsiString("CadenaTimbre");
                VersionSAT = serializer.ReadAnsiString("VersionSAT");
                UUID = serializer.ReadAnsiString("UUID");
                FechaTimbrado = serializer.ReadDateTime("FechaTimbrado");
                NoCertificadoSAT = serializer.ReadAnsiString("NoCertificadoSAT");
                SelloSAT = serializer.ReadAnsiString("SelloSAT");
                Acuse = serializer.ReadAnsiString("Acuse");
                Error = serializer.ReadAnsiString("Error");
                Aprobado = serializer.ReadBoolean("Aprobado");
                RespuestaPAC = serializer.ReadAnsiString("RespuestaPAC");
                UsuarioID = serializer.ReadInt32("UsuarioID");
                Saldo = serializer.ReadInt32("Saldo");
            }
            else
            {
                Acuse = serializer.ReadAnsiString("Acuse");
                Aprobado = serializer.ReadBoolean("Aprobado");
                CadenaTimbre = serializer.ReadAnsiString("CadenaTimbre");
                Error = serializer.ReadAnsiString("Error");
                FechaTimbrado = serializer.ReadDateTime("FechaTimbrado");
                NoCertificadoSAT = serializer.ReadAnsiString("NoCertificadoSAT");
                ReferenciaCFDI = serializer.ReadAnsiString("ReferenciaCFDI");
                RespuestaPAC = serializer.ReadAnsiString("RespuestaPAC");
                Saldo = serializer.ReadInt32("Saldo");
                SelloSAT = serializer.ReadAnsiString("SelloSAT");
                UsuarioID = serializer.ReadInt32("UsuarioID");
                UUID = serializer.ReadAnsiString("UUID");
                VersionSAT = serializer.ReadAnsiString("VersionSAT");
                XML = serializer.ReadAnsiString("XML");
            }
        }

        public override void WriteComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                serializer.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                serializer.WriteAnsiString("XML", XML);
                serializer.WriteAnsiString("CadenaTimbre", CadenaTimbre);
                serializer.WriteAnsiString("VersionSAT", VersionSAT);
                serializer.WriteAnsiString("UUID", UUID);
                serializer.WriteDateTime("FechaTimbrado", FechaTimbrado);
                serializer.WriteAnsiString("NoCertificadoSAT", NoCertificadoSAT);
                serializer.WriteAnsiString("SelloSAT", SelloSAT);
                serializer.WriteAnsiString("Acuse", Acuse);
                serializer.WriteAnsiString("Error", Error);
                serializer.WriteBoolean("Aprobado", Aprobado);
                serializer.WriteAnsiString("RespuestaPAC", RespuestaPAC);
                serializer.WriteInt32("UsuarioID", UsuarioID);
                serializer.WriteInt32("Saldo", Saldo);
            }
            else
            {
                serializer.WriteAnsiString("Acuse", Acuse);
                serializer.WriteBoolean("Aprobado", Aprobado);
                serializer.WriteAnsiString("CadenaTimbre", CadenaTimbre);
                serializer.WriteAnsiString("Error", Error);
                serializer.WriteDateTime("FechaTimbrado", FechaTimbrado);
                serializer.WriteAnsiString("NoCertificadoSAT", NoCertificadoSAT);
                serializer.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                serializer.WriteAnsiString("RespuestaPAC", RespuestaPAC);
                serializer.WriteInt32("Saldo", Saldo);
                serializer.WriteAnsiString("SelloSAT", SelloSAT);
                serializer.WriteInt32("UsuarioID", UsuarioID);
                serializer.WriteAnsiString("UUID", UUID);
                serializer.WriteAnsiString("VersionSAT", VersionSAT);
                serializer.WriteAnsiString("XML", XML);
            }
        }
    }

    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude = true, ApplyToMembers = false)]
    public class TTimbre_Activator : object, RemObjects.SDK.ITypeActivator
    {

        public TTimbre_Activator()
        {
        }

        public object CreateInstance()
        {
            return new TTimbre();
        }
    }

    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass = typeof(TLicenciaCistem_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude = true)]
    public partial class TLicenciaCistem : RemObjects.SDK.Types.ComplexType
    {

        private int @__EstacionID;

        private bool @__Activa;

        private System.DateTime @__Fecha;

        private bool @__EnviarVolumetricos;

        private int @__DiasVencimiento;

        private bool @__Procesar;

        public virtual int EstacionID
        {
            get
            {
                return @__EstacionID;
            }
            set
            {
                @__EstacionID = value;
                this.TriggerPropertyChanged("EstacionID");
            }
        }

        public virtual bool Activa
        {
            get
            {
                return @__Activa;
            }
            set
            {
                @__Activa = value;
                this.TriggerPropertyChanged("Activa");
            }
        }

        public virtual System.DateTime Fecha
        {
            get
            {
                return @__Fecha;
            }
            set
            {
                @__Fecha = value;
                this.TriggerPropertyChanged("Fecha");
            }
        }

        public virtual bool EnviarVolumetricos
        {
            get
            {
                return @__EnviarVolumetricos;
            }
            set
            {
                @__EnviarVolumetricos = value;
                this.TriggerPropertyChanged("EnviarVolumetricos");
            }
        }

        public virtual int DiasVencimiento
        {
            get
            {
                return @__DiasVencimiento;
            }
            set
            {
                @__DiasVencimiento = value;
                this.TriggerPropertyChanged("DiasVencimiento");
            }
        }

        public virtual bool Procesar
        {
            get
            {
                return @__Procesar;
            }
            set
            {
                @__Procesar = value;
                this.TriggerPropertyChanged("Procesar");
            }
        }

        public override void ReadComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                EstacionID = serializer.ReadInt32("EstacionID");
                Activa = serializer.ReadBoolean("Activa");
                Fecha = serializer.ReadDateTime("Fecha");
                EnviarVolumetricos = serializer.ReadBoolean("EnviarVolumetricos");
                DiasVencimiento = serializer.ReadInt32("DiasVencimiento");
                Procesar = serializer.ReadBoolean("Procesar");
            }
            else
            {
                Activa = serializer.ReadBoolean("Activa");
                DiasVencimiento = serializer.ReadInt32("DiasVencimiento");
                EnviarVolumetricos = serializer.ReadBoolean("EnviarVolumetricos");
                EstacionID = serializer.ReadInt32("EstacionID");
                Fecha = serializer.ReadDateTime("Fecha");
                Procesar = serializer.ReadBoolean("Procesar");
            }
        }

        public override void WriteComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                serializer.WriteInt32("EstacionID", EstacionID);
                serializer.WriteBoolean("Activa", Activa);
                serializer.WriteDateTime("Fecha", Fecha);
                serializer.WriteBoolean("EnviarVolumetricos", EnviarVolumetricos);
                serializer.WriteInt32("DiasVencimiento", DiasVencimiento);
                serializer.WriteBoolean("Procesar", Procesar);
            }
            else
            {
                serializer.WriteBoolean("Activa", Activa);
                serializer.WriteInt32("DiasVencimiento", DiasVencimiento);
                serializer.WriteBoolean("EnviarVolumetricos", EnviarVolumetricos);
                serializer.WriteInt32("EstacionID", EstacionID);
                serializer.WriteDateTime("Fecha", Fecha);
                serializer.WriteBoolean("Procesar", Procesar);
            }
        }
    }

    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude = true, ApplyToMembers = false)]
    public class TLicenciaCistem_Activator : object, RemObjects.SDK.ITypeActivator
    {

        public TLicenciaCistem_Activator()
        {
        }

        public object CreateInstance()
        {
            return new TLicenciaCistem();
        }
    }

    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass = typeof(TDatosEstacion_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude = true)]
    public partial class TDatosEstacion : RemObjects.SDK.Types.ComplexType
    {

        private int @__EstacionID;

        private string @__Nombre;

        private string @__RazonSocial;

        private string @__Productos;

        private double @__Latitud;

        private double @__Longitud;

        private string @__Horario;

        private string @__Telefono;

        public virtual int EstacionID
        {
            get
            {
                return @__EstacionID;
            }
            set
            {
                @__EstacionID = value;
                this.TriggerPropertyChanged("EstacionID");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Nombre
        {
            get
            {
                return @__Nombre;
            }
            set
            {
                @__Nombre = value;
                this.TriggerPropertyChanged("Nombre");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string RazonSocial
        {
            get
            {
                return @__RazonSocial;
            }
            set
            {
                @__RazonSocial = value;
                this.TriggerPropertyChanged("RazonSocial");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Productos
        {
            get
            {
                return @__Productos;
            }
            set
            {
                @__Productos = value;
                this.TriggerPropertyChanged("Productos");
            }
        }

        public virtual double Latitud
        {
            get
            {
                return @__Latitud;
            }
            set
            {
                @__Latitud = value;
                this.TriggerPropertyChanged("Latitud");
            }
        }

        public virtual double Longitud
        {
            get
            {
                return @__Longitud;
            }
            set
            {
                @__Longitud = value;
                this.TriggerPropertyChanged("Longitud");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Horario
        {
            get
            {
                return @__Horario;
            }
            set
            {
                @__Horario = value;
                this.TriggerPropertyChanged("Horario");
            }
        }

        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Telefono
        {
            get
            {
                return @__Telefono;
            }
            set
            {
                @__Telefono = value;
                this.TriggerPropertyChanged("Telefono");
            }
        }

        public override void ReadComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                EstacionID = serializer.ReadInt32("EstacionID");
                Nombre = serializer.ReadAnsiString("Nombre");
                RazonSocial = serializer.ReadAnsiString("RazonSocial");
                Productos = serializer.ReadAnsiString("Productos");
                Latitud = serializer.ReadDouble("Latitud");
                Longitud = serializer.ReadDouble("Longitud");
                Horario = serializer.ReadAnsiString("Horario");
                Telefono = serializer.ReadAnsiString("Telefono");
            }
            else
            {
                EstacionID = serializer.ReadInt32("EstacionID");
                Horario = serializer.ReadAnsiString("Horario");
                Latitud = serializer.ReadDouble("Latitud");
                Longitud = serializer.ReadDouble("Longitud");
                Nombre = serializer.ReadAnsiString("Nombre");
                Productos = serializer.ReadAnsiString("Productos");
                RazonSocial = serializer.ReadAnsiString("RazonSocial");
                Telefono = serializer.ReadAnsiString("Telefono");
            }
        }

        public override void WriteComplex(RemObjects.SDK.Serializer serializer)
        {
            if (serializer.RecordStrictOrder)
            {
                serializer.WriteInt32("EstacionID", EstacionID);
                serializer.WriteAnsiString("Nombre", Nombre);
                serializer.WriteAnsiString("RazonSocial", RazonSocial);
                serializer.WriteAnsiString("Productos", Productos);
                serializer.WriteDouble("Latitud", Latitud);
                serializer.WriteDouble("Longitud", Longitud);
                serializer.WriteAnsiString("Horario", Horario);
                serializer.WriteAnsiString("Telefono", Telefono);
            }
            else
            {
                serializer.WriteInt32("EstacionID", EstacionID);
                serializer.WriteAnsiString("Horario", Horario);
                serializer.WriteDouble("Latitud", Latitud);
                serializer.WriteDouble("Longitud", Longitud);
                serializer.WriteAnsiString("Nombre", Nombre);
                serializer.WriteAnsiString("Productos", Productos);
                serializer.WriteAnsiString("RazonSocial", RazonSocial);
                serializer.WriteAnsiString("Telefono", Telefono);
            }
        }
    }

    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude = true, ApplyToMembers = false)]
    public class TDatosEstacion_Activator : object, RemObjects.SDK.ITypeActivator
    {

        public TDatosEstacion_Activator()
        {
        }

        public object CreateInstance()
        {
            return new TDatosEstacion();
        }
    }

    public interface IServiciosService : RemObjects.DataAbstract.Server.IDataAbstractService
    {

        TTimbre Timbrar(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        TTimbre TimbrarBase64(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        string TimbrarString(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        TTimbre CancelaTimbre(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID);

        int SaldoTotalTimbres();

        int SaldoTimbres(string Usuario, string Clave);

        string iButtonToReferencia(string iButton);

        string ReferenciaToiButton(string Referencia);

        bool AgregaIButton(string iButton, string Referencia);

        TTimbre BuscaTimbre(string ReferenciaCFDI);

        TLicenciaCistem LicenciaCistem(int EstacionID);

        TDatosEstacion DatosEstacion(int EstacionID);
    }

    public partial class ServiciosService_Proxy : RemObjects.DataAbstract.Server.DataAbstractService_Proxy, IServiciosService
    {

        public ServiciosService_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) :
                base(message, clientChannel)
        {
        }

        public ServiciosService_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) :
                base(message, clientChannel, interfaceName)
        {
        }

        public ServiciosService_Proxy(RemObjects.SDK.IRemoteService remoteService) :
                base(remoteService)
        {
        }

        public ServiciosService_Proxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) :
                base(remoteService, interfaceName)
        {
        }

        public ServiciosService_Proxy(System.Uri uri) :
                base(uri)
        {
        }

        public ServiciosService_Proxy(string url) :
                base(url)
        {
        }

        public override string InterfaceName
        {
            get
            {
                return "ServiciosService";
            }
        }

        public virtual TTimbre Timbrar(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "Timbrar");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TTimbre _Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual TTimbre TimbrarBase64(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "TimbrarBase64");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TTimbre _Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual string TimbrarString(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "TimbrarString");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual TTimbre CancelaTimbre(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "CancelaTimbre");
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.WriteAnsiString("RFCEmisor", RFCEmisor);
                @__LocalMessage.WriteAnsiString("PKCS12Base64", PKCS12Base64);
                @__LocalMessage.WriteAnsiString("CERBase64", CERBase64);
                @__LocalMessage.WriteAnsiString("KEYBase64", KEYBase64);
                @__LocalMessage.WriteAnsiString("Pass", Pass);
                @__LocalMessage.WriteAnsiString("UUID", UUID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TTimbre _Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual int SaldoTotalTimbres()
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "SaldoTotalTimbres");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                int _Result = @__LocalMessage.ReadInt32("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual int SaldoTimbres(string Usuario, string Clave)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "SaldoTimbres");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                int _Result = @__LocalMessage.ReadInt32("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual string iButtonToReferencia(string iButton)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "iButtonToReferencia");
                @__LocalMessage.WriteAnsiString("iButton", iButton);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual string ReferenciaToiButton(string Referencia)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "ReferenciaToiButton");
                @__LocalMessage.WriteAnsiString("Referencia", Referencia);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual bool AgregaIButton(string iButton, string Referencia)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "AgregaIButton");
                @__LocalMessage.WriteAnsiString("iButton", iButton);
                @__LocalMessage.WriteAnsiString("Referencia", Referencia);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual TTimbre BuscaTimbre(string ReferenciaCFDI)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "BuscaTimbre");
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TTimbre _Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual TLicenciaCistem LicenciaCistem(int EstacionID)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "LicenciaCistem");
                @__LocalMessage.WriteInt32("EstacionID", EstacionID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TLicenciaCistem _Result = ((TLicenciaCistem)(@__LocalMessage.Read("Result", typeof(TLicenciaCistem), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual TDatosEstacion DatosEstacion(int EstacionID)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "DatosEstacion");
                @__LocalMessage.WriteInt32("EstacionID", EstacionID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                TDatosEstacion _Result = ((TDatosEstacion)(@__LocalMessage.Read("Result", typeof(TDatosEstacion), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
    }

    public class CoServiciosService
    {

        public static IServiciosService Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel)
        {
            return new ServiciosService_Proxy(message, clientChannel);
        }

        public static IServiciosService Create(RemObjects.SDK.IRemoteService remoteService)
        {
            return new ServiciosService_Proxy(remoteService);
        }

        public static IServiciosService Create(System.Uri uri)
        {
            return new ServiciosService_Proxy(uri);
        }

        public static IServiciosService Create(string url)
        {
            return new ServiciosService_Proxy(url);
        }
    }

    public interface IServiciosService_Async : RemObjects.DataAbstract.Server.IDataAbstractService_Async
    {

        System.IAsyncResult BeginTimbrar(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData);

        TTimbre EndTimbrar(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TTimbre> TimbrarAsync(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        System.IAsyncResult BeginTimbrarBase64(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData);

        TTimbre EndTimbrarBase64(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TTimbre> TimbrarBase64Async(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        System.IAsyncResult BeginTimbrarString(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData);

        string EndTimbrarString(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<string> TimbrarStringAsync(string Usuario, string Clave, string XML, string ReferenciaCFDI);

        System.IAsyncResult BeginCancelaTimbre(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID, System.AsyncCallback @__Callback, object @__UserData);

        TTimbre EndCancelaTimbre(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TTimbre> CancelaTimbreAsync(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID);

        System.IAsyncResult BeginSaldoTotalTimbres(System.AsyncCallback @__Callback, object @__UserData);

        int EndSaldoTotalTimbres(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<int> SaldoTotalTimbresAsync();

        System.IAsyncResult BeginSaldoTimbres(string Usuario, string Clave, System.AsyncCallback @__Callback, object @__UserData);

        int EndSaldoTimbres(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<int> SaldoTimbresAsync(string Usuario, string Clave);

        System.IAsyncResult BeginiButtonToReferencia(string iButton, System.AsyncCallback @__Callback, object @__UserData);

        string EndiButtonToReferencia(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<string> iButtonToReferenciaAsync(string iButton);

        System.IAsyncResult BeginReferenciaToiButton(string Referencia, System.AsyncCallback @__Callback, object @__UserData);

        string EndReferenciaToiButton(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<string> ReferenciaToiButtonAsync(string Referencia);

        System.IAsyncResult BeginAgregaIButton(string iButton, string Referencia, System.AsyncCallback @__Callback, object @__UserData);

        bool EndAgregaIButton(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<bool> AgregaIButtonAsync(string iButton, string Referencia);

        System.IAsyncResult BeginBuscaTimbre(string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData);

        TTimbre EndBuscaTimbre(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TTimbre> BuscaTimbreAsync(string ReferenciaCFDI);

        System.IAsyncResult BeginLicenciaCistem(int EstacionID, System.AsyncCallback @__Callback, object @__UserData);

        TLicenciaCistem EndLicenciaCistem(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TLicenciaCistem> LicenciaCistemAsync(int EstacionID);

        System.IAsyncResult BeginDatosEstacion(int EstacionID, System.AsyncCallback @__Callback, object @__UserData);

        TDatosEstacion EndDatosEstacion(System.IAsyncResult @__AsyncResult);

        System.Threading.Tasks.Task<TDatosEstacion> DatosEstacionAsync(int EstacionID);
    }

    public partial class ServiciosService_AsyncProxy : RemObjects.DataAbstract.Server.DataAbstractService_AsyncProxy, IServiciosService_Async
    {

        public ServiciosService_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) :
                base(message, clientChannel)
        {
        }

        public ServiciosService_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) :
                base(message, clientChannel, interfaceName)
        {
        }

        public ServiciosService_AsyncProxy(RemObjects.SDK.IRemoteService remoteService) :
                base(remoteService)
        {
        }

        public ServiciosService_AsyncProxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) :
                base(remoteService, interfaceName)
        {
        }

        public ServiciosService_AsyncProxy(System.Uri uri) :
                base(uri)
        {
        }

        public ServiciosService_AsyncProxy(string url) :
                base(url)
        {
        }

        public override string InterfaceName
        {
            get
            {
                return "ServiciosService";
            }
        }

        public virtual System.IAsyncResult BeginTimbrar(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "Timbrar");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TTimbre EndTimbrar(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TTimbre Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TTimbre> TimbrarAsync(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            return System.Threading.Tasks.Task<TTimbre>.Factory.FromAsync(this.BeginTimbrar(Usuario, Clave, XML, ReferenciaCFDI, null, null), new System.Func<System.IAsyncResult, TTimbre>(this.EndTimbrar));
        }

        public virtual System.IAsyncResult BeginTimbrarBase64(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "TimbrarBase64");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TTimbre EndTimbrarBase64(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TTimbre Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TTimbre> TimbrarBase64Async(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            return System.Threading.Tasks.Task<TTimbre>.Factory.FromAsync(this.BeginTimbrarBase64(Usuario, Clave, XML, ReferenciaCFDI, null, null), new System.Func<System.IAsyncResult, TTimbre>(this.EndTimbrarBase64));
        }

        public virtual System.IAsyncResult BeginTimbrarString(string Usuario, string Clave, string XML, string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "TimbrarString");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.WriteAnsiString("XML", XML);
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual string EndTimbrarString(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<string> TimbrarStringAsync(string Usuario, string Clave, string XML, string ReferenciaCFDI)
        {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginTimbrarString(Usuario, Clave, XML, ReferenciaCFDI, null, null), new System.Func<System.IAsyncResult, string>(this.EndTimbrarString));
        }

        public virtual System.IAsyncResult BeginCancelaTimbre(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "CancelaTimbre");
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.WriteAnsiString("RFCEmisor", RFCEmisor);
                @__LocalMessage.WriteAnsiString("PKCS12Base64", PKCS12Base64);
                @__LocalMessage.WriteAnsiString("CERBase64", CERBase64);
                @__LocalMessage.WriteAnsiString("KEYBase64", KEYBase64);
                @__LocalMessage.WriteAnsiString("Pass", Pass);
                @__LocalMessage.WriteAnsiString("UUID", UUID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TTimbre EndCancelaTimbre(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TTimbre Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TTimbre> CancelaTimbreAsync(string ReferenciaCFDI, string RFCEmisor, string PKCS12Base64, string CERBase64, string KEYBase64, string Pass, string UUID)
        {
            return System.Threading.Tasks.Task<TTimbre>.Factory.FromAsync(this.BeginCancelaTimbre(ReferenciaCFDI, RFCEmisor, PKCS12Base64, CERBase64, KEYBase64, Pass, UUID, null, null), new System.Func<System.IAsyncResult, TTimbre>(this.EndCancelaTimbre));
        }

        public virtual System.IAsyncResult BeginSaldoTotalTimbres(System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "SaldoTotalTimbres");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual int EndSaldoTotalTimbres(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                int Result = @__LocalMessage.ReadInt32("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<int> SaldoTotalTimbresAsync()
        {
            return System.Threading.Tasks.Task<int>.Factory.FromAsync(this.BeginSaldoTotalTimbres(null, null), new System.Func<System.IAsyncResult, int>(this.EndSaldoTotalTimbres));
        }

        public virtual System.IAsyncResult BeginSaldoTimbres(string Usuario, string Clave, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "SaldoTimbres");
                @__LocalMessage.WriteAnsiString("Usuario", Usuario);
                @__LocalMessage.WriteAnsiString("Clave", Clave);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual int EndSaldoTimbres(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                int Result = @__LocalMessage.ReadInt32("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<int> SaldoTimbresAsync(string Usuario, string Clave)
        {
            return System.Threading.Tasks.Task<int>.Factory.FromAsync(this.BeginSaldoTimbres(Usuario, Clave, null, null), new System.Func<System.IAsyncResult, int>(this.EndSaldoTimbres));
        }

        public virtual System.IAsyncResult BeginiButtonToReferencia(string iButton, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "iButtonToReferencia");
                @__LocalMessage.WriteAnsiString("iButton", iButton);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual string EndiButtonToReferencia(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<string> iButtonToReferenciaAsync(string iButton)
        {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginiButtonToReferencia(iButton, null, null), new System.Func<System.IAsyncResult, string>(this.EndiButtonToReferencia));
        }

        public virtual System.IAsyncResult BeginReferenciaToiButton(string Referencia, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "ReferenciaToiButton");
                @__LocalMessage.WriteAnsiString("Referencia", Referencia);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual string EndReferenciaToiButton(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<string> ReferenciaToiButtonAsync(string Referencia)
        {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginReferenciaToiButton(Referencia, null, null), new System.Func<System.IAsyncResult, string>(this.EndReferenciaToiButton));
        }

        public virtual System.IAsyncResult BeginAgregaIButton(string iButton, string Referencia, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "AgregaIButton");
                @__LocalMessage.WriteAnsiString("iButton", iButton);
                @__LocalMessage.WriteAnsiString("Referencia", Referencia);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual bool EndAgregaIButton(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<bool> AgregaIButtonAsync(string iButton, string Referencia)
        {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginAgregaIButton(iButton, Referencia, null, null), new System.Func<System.IAsyncResult, bool>(this.EndAgregaIButton));
        }

        public virtual System.IAsyncResult BeginBuscaTimbre(string ReferenciaCFDI, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "BuscaTimbre");
                @__LocalMessage.WriteAnsiString("ReferenciaCFDI", ReferenciaCFDI);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TTimbre EndBuscaTimbre(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TTimbre Result = ((TTimbre)(@__LocalMessage.Read("Result", typeof(TTimbre), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TTimbre> BuscaTimbreAsync(string ReferenciaCFDI)
        {
            return System.Threading.Tasks.Task<TTimbre>.Factory.FromAsync(this.BeginBuscaTimbre(ReferenciaCFDI, null, null), new System.Func<System.IAsyncResult, TTimbre>(this.EndBuscaTimbre));
        }

        public virtual System.IAsyncResult BeginLicenciaCistem(int EstacionID, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "LicenciaCistem");
                @__LocalMessage.WriteInt32("EstacionID", EstacionID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TLicenciaCistem EndLicenciaCistem(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TLicenciaCistem Result = ((TLicenciaCistem)(@__LocalMessage.Read("Result", typeof(TLicenciaCistem), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TLicenciaCistem> LicenciaCistemAsync(int EstacionID)
        {
            return System.Threading.Tasks.Task<TLicenciaCistem>.Factory.FromAsync(this.BeginLicenciaCistem(EstacionID, null, null), new System.Func<System.IAsyncResult, TLicenciaCistem>(this.EndLicenciaCistem));
        }

        public virtual System.IAsyncResult BeginDatosEstacion(int EstacionID, System.AsyncCallback @__Callback, object @__UserData)
        {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try
            {
                Message.SetAttributes(ClientChannel, new string[] {
                            "targetnamespace",
                            "wsdl"}, new string[] {
                            "https://www.fel.mx/WS-TFD",
                            "https://www.fel.mx/WS-TFD/WS-TFD.asmx?WSDL"});
                try
                {
                }
                finally
                {
                    Message.ClearAttributes(ClientChannel);
                }
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "ServiciosLibrary", ActiveInterfaceName, "DatosEstacion");
                @__LocalMessage.WriteInt32("EstacionID", EstacionID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex)
            {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }

        public virtual TDatosEstacion EndDatosEstacion(System.IAsyncResult @__AsyncResult)
        {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try
            {
                TDatosEstacion Result = ((TDatosEstacion)(@__LocalMessage.Read("Result", typeof(TDatosEstacion), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally
            {
                this.@__ClearMessage(@__LocalMessage);
            }
        }

        public virtual System.Threading.Tasks.Task<TDatosEstacion> DatosEstacionAsync(int EstacionID)
        {
            return System.Threading.Tasks.Task<TDatosEstacion>.Factory.FromAsync(this.BeginDatosEstacion(EstacionID, null, null), new System.Func<System.IAsyncResult, TDatosEstacion>(this.EndDatosEstacion));
        }
    }

    public class CoServiciosServiceAsync
    {

        public static IServiciosService_Async Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel)
        {
            return new ServiciosService_AsyncProxy(message, clientChannel);
        }

        public static IServiciosService_Async Create(RemObjects.SDK.IRemoteService remoteService)
        {
            return new ServiciosService_AsyncProxy(remoteService);
        }

        public static IServiciosService_Async Create(System.Uri uri)
        {
            return new ServiciosService_AsyncProxy(uri);
        }

        public static IServiciosService_Async Create(string url)
        {
            return new ServiciosService_AsyncProxy(url);
        }
    }
}
